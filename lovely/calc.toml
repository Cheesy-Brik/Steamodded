[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Card:get_chip_x_mult()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.x_mult <= 1 then return 0 end"
position = "at"
payload = ""
match_indent = true

# # G.FUNCS.evaluate_play(), end_round()
# [[patches]]
# [patches.pattern]
# target = "functions/state_events.lua"
# pattern = "if next(eval) and (next(effects[1]) or #effects > 1)  then"
# position = "at"
# payload = "if eval.seals then"
# match_indent = true
# [[patches]]
# [patches.pattern]
# target = "functions/state_events.lua"
# pattern = "if next(eval) and (next(effects[1]) or #effects > 1) then"
# position = "at"
# payload = "if eval.seals then"
# match_indent = true
# [[patches]]
# [patches.regex]
# target = "functions/state_events.lua"
# pattern = '''
# (?<indent>[\t ]*)if next\(eval\) then 
# [\t ]*    for h = 1, eval\.seals\.repetitions do'''
# position = "at"
# payload = '''
# if eval.seals then
#     for h = 1, eval.seals.repetitions do'''
# line_prepend = '$indent'

# card_eval_status_text()
[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = 'extra\.mult_mod'
position = "at"
payload = '(extra.mult or extra.mult_mod)'
[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = 'extra\.Xmult_mod'
position = "at"
payload = '(extra.x_mult or extra.x_mult_mod or extra.Xmult_mod)'
[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = 'extra\.chip_mod'
position = "at"
payload = '(extra.chips or extra.chip_mod)'

# G.FUNCS.evaluate_play()
[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''
(?<indent>[\t ]*)scoring_hand\[i\].lucky_trigger = nil
[\t ]*
([\t ]*for ii = 1, #effects do[\s\S]*?edition = true\}\)
[\t ]*end
[\t ]*end)'''
root_capture = "$2"
position = "at"
payload = '''
SMODS.eval_playing_card_effect{
    card = scoring_hand[i],
    effect = effects,
    percent = percent
}'''
line_prepend = "$indent"